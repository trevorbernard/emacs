#+TITLE: Emacs Configuration
#+AUTHOR: Trevor Bernard
#+EMAIL: trevor@bernard.gg
#+LANGUAGE: en

* Configuration

#+BEGIN_QUOTE
This is my emacs, there are many like it, but this one is mine...
#+END_QUOTE   

** Getting Started

The very first thing you need to have installed is a recent version of Emacs. I
believe the minimum supported version is Emacs 24 otherwise you'll have to
install =package.el= and you're on your own.

I strongly suggest you remap your cap locks key to control to help reduce the
onset of Emacs pinky. I even go further and have a new key binding for =M-x=, so
you are hitting =Ctrl= instead of =Alt=.

You will need the following already installed for this configuration to run
correctly.

Install the [[https://fonts.google.com/specimen/Inconsolata][Inconsolata]] font because it's beautiful and makes for a wonderful
font. You will need ispell installed in order to user Flymake mode. Clojure mode
requires [[https://leiningen.org/][leiningen]].


** Emacs Initialization

I use melpa and melpa stable for my packages.

#+BEGIN_SRC emacs-lisp
  (require 'package)

  (setq 'package-archives
        '(("melpa" . "https://melpa.org/packages/") t)
          ("melpa-stable" . "https://stable.melpa.org/packages/") t)

#+END_SRC

I don't like my cider to be bleeding edge since it's caused compatability
problems in the past so pin it to melpa-stable.

#+BEGIN_SRC emacs-lisp
  (setq 'package-pinned-packages '((cider . "melpa-stable") t))
#+END_SRC

Install my packages if they aren't installed.

#+BEGIN_SRC emacs-lisp
  (package-initialize)

  (when (not package-archive-contents)
    (package-refresh-contents))

  (defvar my-packages '(paredit
                        clojure-mode
                        clj-refactor
                        dracula-theme
                        dockerfile-mode
                        projectile
                        cider
                        company
                        rainbow-delimiters
                        markdown-mode
                        protobuf-mode
                        htmlize
                        yaml-mode)
    "A list of packages to ensure are installed at launch.")

  (dolist (p my-packages)
    (when (not (package-installed-p p))
      (package-install p)))
#+END_SRC

I like to have my Emacs clean, chrisp and minimal. Removing the menu bar, tool
bar, and scroll bar frees some space and it helps remove dependency on the
mouse. Protip: Learn the Emacs navigation key strokes until they are second
nature. You can thank me later.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (dolist (mode '(menu-bar-mode tool-bar-mode scroll-bar-mode))
    (when (fboundp mode) (funcall mode -1)))

  (when window-system
    (set-default-font "Inconsolata-16")
    (load-theme 'dracula t))
#+END_SRC

** Personal

Dats me.

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Trevor Bernard"
        user-mail-address "trevor@bernard.gg")
#+END_SRC

** Key Bindings

Ignore minimize functionality when you're in a GUI because it's very annoying to
accidently minimize your window.
  
#+BEGIN_SRC emacs-lisp
  (when window-system
    (global-set-key "\C-z" 'ignore)
    (global-set-key "\C-x\C-z" 'ignore))
#+END_SRC

*** Invoke M-x without the Alt key

M-x is one of the most wildly used key combinations in Emacs but it's also the
most annoying. You have to scrunch your left thumb and fore finger in the most
uncomfortable RSI inducing way.

I choose to rebind M-x to C-x C-m because of an article Steve Yegge wrote
called: [[https://sites.google.com/site/steveyegge2/effective-emacs][Effective Emacs]]. This allows you to keep your fingers on the home row if
you have caps lock mapped to control. With some practice, it will become
intuitive.

#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-x\C-m" 'execute-extended-command)
  (global-set-key "\C-c\C-m" 'execute-extended-command)
#+END_SRC

* Mac specific configuration

#+BEGIN_SRC emacs-lisp
  (defun set-exec-path-from-shell-PATH ()
    (let ((path-from-shell (shell-command-to-string "$SHELL -i -c 'echo $PATH'")))
      (setenv "PATH" path-from-shell)
      (setq exec-path (split-string path-from-shell path-separator))))

  (defun my-mac-config ()
    ;; Mac's ls doesn't support --dired
    (setq dired-use-ls-dired nil)

    (setq default-frame-alist `((font . "Inconsolata-16")))

    ;; make sure path is correct when launched as application
    (set-exec-path-from-shell-PATH)

    (setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
    (setq exec-path (append exec-path '("/usr/local/bin")))

    ;; Move to trash when deleting stuff
    (setq delete-by-moving-to-trash t
          trash-directory "~/.Trash/emacs")

    ;; Don't open files from the workspace in a new frame
    (setq ns-pop-up-frames nil)

    ;; Use aspell for spell checking: brew install aspell --lang=en
    (setq ispell-program-name "/usr/local/bin/aspell")

    ;; Open up links in Google Chrome
    (setq browse-url-browser-function 'browse-url-default-macosx-browser))

  (when (equal system-type 'darwin)
    (my-mac-config))
#+END_SRC

* Preferences

** Global Preferences

#+BEGIN_SRC emacs-lisp
  (setq interprogram-paste-function 'x-selection-value) ;
  (global-auto-revert-mode t) ; Auto revert buffers
  (ido-mode 1)
  (column-number-mode 1) ; Show column number
  (delete-selection-mode 1) ; Allow delete of selection
  (fset 'yes-or-no-p 'y-or-n-p) ; Shorten confirmation message
  (global-font-lock-mode 1) ; Syntax Highlighting
  (show-paren-mode 1) ; Highlight parenthesis
  ;; Highlight selected Regions
  (transient-mark-mode 1)
  ;; Make pgup/dn remember current line
  (setq scroll-preserve-screen-position t) 
#+END_SRC

Use spaces in favour of tabs because they are evil. But when there are tabs show
them as 8 spaces.

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default c-basic-offset 4)
  (setq-default tab-width 8)
#+END_SRC  

Limit the default fill mode to 80 characters

#+BEGIN_SRC emacs-lisp
  (setq-default set-fill-column 80)
  (setq-default truncate-lines nil)
#+END_SRC

Ignore the stupid ring bell feature.

#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

Allow functions without issuing warnings

#+BEGIN_SRC emacs-lisp
  (put 'downcase-region 'disabled nil)
  (put 'narrow-to-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
#+END_SRC

* Programming Languages

** Clojure Mode  

I have long since used this key binding to jack into a repl. My fingers are
programmed this way.
   
#+BEGIN_SRC emacs-lisp
  (require 'cider)
  (require 'clojure-mode)
  (require 'company)

  (global-set-key (kbd "C-c C-j") 'cider-jack-in)
#+END_SRC   

#+BEGIN_SRC emacs-lisp
  (setq nrepl-log-messages t)
  (setq cider-repl-use-clojure-font-lock t)
  (setq cider-repl-display-help-banner nil)

  (add-hook 'cider-repl-mode-hook
            '(lambda ()
               (company-mode 1)
               (paredit-mode 1)
               (rainbow-delimiters-mode 1)))

  (add-hook 'cider-mode-hook
            '(lambda ()
               (company-mode 1)
               (eldoc-mode 1)))

  (add-hook 'clojure-mode-hook
            '(lambda ()
               (setq show-trailing-whitespace 1)
               (rainbow-delimiters-mode 1)
               (linum-mode t)
               (paredit-mode 1)
               (subword-mode t)
               (eldoc-add-command 'paredit-backward-delete 'paredit-close-round)))
#+END_SRC

When you hit =f3= at the end of the sexp in Clojure, it will copy and evaluate
the function into the current repl. I no longer use this function but it might
be useful to someone eventually.

#+BEGIN_SRC emacs-lisp
  (defun my-last-expression ()
    "Return the last sexp."
    (buffer-substring-no-properties
     (save-excursion (backward-sexp) (point))
     (point)))

  (defun cider-execute-in-current-repl (expr)
    (if (not (get-buffer (cider-current-connection)))
        (message "No active nREPL connection.")
      (progn
        (set-buffer (cider-current-repl))
        (goto-char (point-max))
        (insert expr)
        (cider-repl-return))))

  (defun cider-eval-expression-at-point-in-repl ()
    (interactive)
    (let ((form (my-last-expression)))
      ;; Eat white
      (while (string-match "\\`\s+\\|\n+\\'" form)
        (setq form (replace-match "" t t form)))
      (cider-execute-in-current-repl form)))

  (eval-after-load 'cider-repl-mode-hook
    '(local-set-key '[f3] 'cider-eval-expression-at-point-in-repl))
#+END_SRC

** Paredit

Some handy dandy paredit shortcuts

#+BEGIN_SRC emacs-lisp
  (eval-after-load 'paredit
    '(progn
       (define-key paredit-mode-map (kbd "C-<right>") 'paredit-forward-slurp-sexp)
       (define-key paredit-mode-map (kbd "C-<left>") 'paredit-forward-barf-sexp)
       (define-key paredit-mode-map (kbd "C-<backspace>") 'paredit-backward-kill-word)))
#+END_SRC

** Org Mode

Add auto fill mode when org mode starts

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
            '(lambda ()
               (turn-on-auto-fill)))
#+END_SRC

I almost exclusively use =C-j= in place of hitting the enter key. The problem is
that it's bound to =newline-and-indent= function. This is very annoying in when
you are in =org-mode=. So instead of trying to remap my brain, I'll remap it to
=newline=.

#+BEGIN_SRC emacs-lisp
  (eval-after-load 'org-mode-hook
                   '(local-set-key (kbd "C-j") 'newline))
#+END_SRC

** JavaScript

#+BEGIN_SRC emacs-lisp
  (setq js-indent-level 2)
#+END_SRC

** CSS

#+BEGIN_SRC emacs-lisp
  (defun css-mode-hook ()
    (autoload 'css-mode "css-mode" nil t)
    (add-hook 'css-mode-hook '(lambda ()
                                (setq css-indent-level 2)
                                (setq css-indent-offset 2))))
#+END_SRC   

** Markdown

#+BEGIN_SRC emacs-lisp
  (autoload 'markdown-mode "markdown-mode"
     "Major mode for editing Markdown files" t)
  (add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

  (defun markdown-hook ()
   (setq-default fill-column 80)
   (auto-fill-mode t)
   (flyspell-mode t))

  (add-hook 'markdown-mode-hook 'markdown-hook)
#+END_SRC


** Git

Use diff-mode when editing a git commit message

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("COMMIT_EDITMSG$" . diff-mode))
#+END_SRC
